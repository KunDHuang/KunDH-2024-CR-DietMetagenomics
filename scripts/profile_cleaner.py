#!/usr/bin/env python

"""
NAME: profile_cleaner.py
DESCRIPTION: profile_cleaner.py is a python script to remove metagenomic features (e.g. taxa, gene and pathways)
by stricting minimum abundance values and minimum prevalence in the all samples.
DATE: 07.12.2022
"""

import pandas as pd
import numpy as np
from utils.pandas_dealer import PandasDealer
import sys
import argparse
import textwrap

def read_args(args):
    # This function is to parse arguments

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                    description = textwrap.dedent('''\
                                     This program is to clean microbiome profiles.
                                     '''),
                                    epilog = textwrap.dedent('''\
                                    examples: profile_cleaner.py --profile <abundance_table.tsv> --row_numbers <0,1,2> --min_abundance <minimum_abundance> --min_prevalence <minimum_prevalence> --output <abundance_table_filtered.tsv>
                                    '''))

    parser.add_argument('--profile',
                        nargs = '?',
                        help = 'Input the merged abundance profile generated by MetaPhlAn or HUMAnNN.',
                        type = str,
                        default = None)

    parser.add_argument('--row_numbers',
                        nargs = '?',
                        help = 'If you have metadata wedged please specify row numbers delimited by comma, zero-based and without considering header, e.g 0,1,2,3,4.\
                            Otherwise leave this as it is.',
                        type = str,
                        default = None)

    parser.add_argument('--min_abundance',
                        nargs = '?',
                        help = 'Specify the minimum abundance. Default: [0]',
                        type = float,
                        default = 0)

    parser.add_argument('--min_prevalence',
                        nargs = '?',
                        help = 'Specify the minimum prevalence in all samples (in percentage). Default: [0]. Note: if this parameter is set --nth_percentitle will be muted.',
                        type = float,
                        default = None)

    parser.add_argument('--nth_percentile',
                        nargs = '?',
                        help = 'Specify the minimum relative abundance at the nth percentitle. Default: [10]. Note: if this parameter is set --min_prevalence will be muted.',
                        type = float,
                        default = None)
    
    parser.add_argument('--output',
                        nargs = '?',
                        help = 'Give a name to the output file.',
                        type = str,
                        default = None)
    
    return vars(parser.parse_args())


def clean_df(df_, min_abundance, min_prevalence):
    # df_: the metadata-free dataframe to be cleaned.
    # min_abundance: the threshold for the minimum abundance value.
    # min_prevalence: the threshold for the minimum prevalence value.
    
    rt_df = rotate_df(df_)
    all_features = rt_df.columns[1:]
    selected_features = []
    for feature in all_features:
        abundances_per_feature = [float(i) for i in rt_df[feature].to_list()]
        qc_abundances_per_feature = [i for i in abundances_per_feature if i >= min_abundance]
        if len(qc_abundances_per_feature)/len(abundances_per_feature) >= (min_prevalence/100):
            selected_features.append(feature)
    
    feature_col = df_.columns[0]
    df_ = df_[df_[feature_col].isin(selected_features)]
    
    return df_

def clean_df_percentitle(df_, min_abundance, nth_percentitle):
    # df_: the metadata-free dataframe to be cleaned.
    # min_abundance: the threshold for the minimum abundance value.
    # nth_pencentitle: specify the Nth percentitle at which the min_abundance will be effective.
    rt_df = rotate_df(df_)
    all_features = rt_df.columns[1:]
    selected_features = []
    nth_percentitle = float(nth_percentitle)/100
    for feature in all_features:
        nth_percentitle_abundance = rt_df[feature].quantile(nth_percentitle)
        if nth_percentitle_abundance >= min_abundance:
            selected_features.append(feature)
    feature_col = df_.columns[0]
    
    df_ = df_[df_[feature_col].isin(selected_features)]
    return df_        

def rotate_df(df_):
    # this function is to rotate the metaphlan-style table into tidy dataframe to ease searching work,

    df_rows_lists = df_.values.tolist()
    rotated_df_dict = {df_.columns[0]: df_.columns[1:]}
    for i in df_rows_lists:
        rotated_df_dict[i[0]] = i[1:]

    rotated_df = pd.DataFrame.from_dict(rotated_df_dict)
        
    return rotated_df


if __name__ == "__main__":
    pars = read_args(sys.argv)
    if pars['row_numbers']:
        df_data = PandasDealer(pars["profile"]).get_df_dropping_metadata([int(i) for i in pars["row_numbers"].split(",")])
        df_metadata = PandasDealer(pars["profile"]).get_metadata_rows([int(i) for i in pars["row_numbers"].split(",")])
        if pars["min_prevalence"] and not pars["nth_percentile"]:
            df_data_clean = clean_df(df_data, pars["min_abundance"], pars["min_prevalence"])
            df_clean = pd.concat([df_metadata, df_data_clean])
        elif pars["nth_percentile"] and not pars["min_prevalence"]:
            df_data_clean = clean_df_percentitle(df_data, pars["min_abundance"], pars["nth_percentile"])
            df_clean = pd.concat([df_metadata, df_data_clean])
        else:
            sys.exit("Please use --min_prevalence or --nth_percentitle, nor both together beither both missiing!")
            
    else:
        df_ = pd.read_csv(pars["profile"], sep = "\t", index_col = False)
        if pars["min_prevalence"] and not pars["nth_percentile"]:
            df_clean = clean_df(df_, pars["min_abundance"], pars["min_prevalence"])
        elif pars["nth_percentile"] and not pars["min_prevalence"]:
            df_clean = clean_df_percentitle(df_, pars["min_abundance"], pars["nth_percentile"])
        else:
            sys.exit("Please use --min_prevalence or --nth_percentile, nor both together neither both missing!")
            

    df_clean.to_csv(pars["output"],
                      sep = "\t",
                      index = False)




